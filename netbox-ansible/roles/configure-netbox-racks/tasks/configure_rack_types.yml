---
- name: Checking for rack type with slug {{ rack.data.slug }}
  ansible.builtin.uri:
    url: "{{ netbox_url }}/api/dcim/rack-types/?slug={{ rack.data.slug }}"
    method: GET
    headers:
      Authorization: "Token {{ netbox_token }}"
    return_content: yes
  register: response

- name: Fail if multiple rack-types with same slug
  fail:
    msg: "Multiple rack-types found with slug {{ rack.data.slug }}"
  when: response.json.count > 1

- name: Set rack_type_id if exists
  set_fact:
    rack_type_id: "{{ response.json.results[0].id }}"
  when: response.json.count == 1

- name: Creating rack type {{ rack.data.model }}
  ansible.builtin.uri:
    url: "{{ netbox_url }}/api/dcim/rack-types/"
    method: POST
    headers:
      Authorization: "Token {{ netbox_token }}"
      Content-Type: "application/json"
    body: "{{ rack.data | to_json }}"
    status_code: 201
  when: response.json.count == 0 and rack.state == "present"

- name: Updating rack type with slug {{ rack.data.slug }}
  ansible.builtin.uri:
    url: "{{ netbox_url }}/api/dcim/rack-types/{{ rack_type_id }}/"
    method: PUT
    headers:
      Authorization: "Token {{ netbox_token }}"
      Content-Type: "application/json"
    body: "{{ rack.data | to_json }}"
    status_code: 200
  when: response.json.count == 1 and rack.state == "present"

- name: Deleting existing rack type with slug {{ rack.data.slug }}
  ansible.builtin.uri:
    url: "{{ netbox_url }}/api/dcim/rack-types/{{ rack_type_id }}/"
    method: DELETE
    headers:
      Authorization: "Token {{ netbox_token }}"
    status_code: 204
  when: response.json.count == 1 and rack.state == "absent"
